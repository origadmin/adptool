# .adptool.toml.example

# Top-level global rules. These apply to all adaptable items (types, functions, methods)
# unless overridden by more specific category or package rules.
prefix = "Global"
suffix = "All"
[explicit]
GlobalOldName = "GlobalNewName"
[[regex]]
pattern = "GlobalPattern$"
replace = "GlobalReplacement"
ignore = ["GlobalIgnoredItem"]

# Inheritance flags for top-level global rules.
# If true, category-specific rules will merge with these top-level global rules.
# If false (default), category-specific rules will replace top-level global rules (unless empty, then global is fallback).
inherit_prefix = true
inherit_suffix = true
inherit_explicit = true
inherit_regex = true
inherit_ignore = true

# Category-specific rules for Types.
# These rules apply only to types. They can inherit from or override top-level global rules.
[types]
prefix = "Type"
suffix = "Adapter"
[types.explicit]
MyOldType = "MyNewType"
[[types.regex]]
pattern = "Model$"
replace = "Entity"
types.ignore = ["DeprecatedType"]
# Inheritance flags for this category.
# If true, this category's rules will merge with the top-level global rules.
types.inherit_explicit = true
types.inherit_prefix = true # Merge with top-level "Global" prefix -> "GlobalType"
types.inherit_suffix = true # Merge with top-level "All" suffix -> "AdapterAll"
types.inherit_regex = true
types.inherit_ignore = true

# Category-specific rules for Functions.
[functions]
prefix = "Func"
suffix = "Proxy"
[functions.explicit]
OldFunction = "NewFunction"
[[functions.regex]]
pattern = "Service$"
replace = "ServiceHandler"
functions.ignore = ["InternalFunction"]
functions.inherit_prefix = true
functions.inherit_suffix = true
functions.inherit_explicit = true
functions.inherit_regex = true
functions.inherit_ignore = true

# Category-specific rules for Methods.
[methods]
prefix = "Method"
suffix = "Wrapper"
[methods.explicit]
"MyStruct.OldMethod" = "MyStruct.NewMethod" # Keys with dots need quotes in TOML
[[methods.regex]]
pattern = "Exec$"
replace = "Execute"
methods.ignore = ["MyStruct.DeprecatedMethod"]
methods.inherit_prefix = true
methods.inherit_suffix = true
methods.inherit_explicit = true
methods.inherit_regex = true
methods.inherit_ignore = true

# Package-specific overrides.
# Rules defined here apply only to the specified package and override global/category rules.
[[packages]]
import = "github.com/example/mylib"
path = "./vendor/github.com/example/mylib" # Optional: local path to source
alias = "lib" # Optional: alias used in directive files

# Package-specific rules for Types within mylib.
[packages.types]
prefix = "LibType"
# Example: This package's explicit rules for types will merge with global type explicit rules.
inherit_explicit = true
[packages.types.explicit]
LibSpecificType = "CustomLibType"
packages.types.ignore = ["LibInternalType"]

# Package-specific rules for Functions within mylib.
[packages.functions]
prefix = "LibFunc"
[packages.functions.explicit]
LibSpecificFunc = "CustomLibFunc"

# Package-specific rules for Methods within mylib.
[packages.methods]
prefix = "LibMethod"
[packages.methods.explicit]
"LibStruct.LibMethod" = "CustomLibMethod"
