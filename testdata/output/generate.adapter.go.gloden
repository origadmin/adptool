// Code generated by adptool. DO NOT EDIT.
//
// This file is generated from generate.go.

// Package aliaspkg contains generated code by adptool.
package aliaspkg

import (
	pkg1 "github.com/origadmin/adptool/testdata/duplicate/pkg1"
	pkg2 "github.com/origadmin/adptool/testdata/duplicate/pkg2"
	pkg3 "github.com/origadmin/adptool/testdata/duplicate/pkg3"
	sourcepkg1 "github.com/origadmin/adptool/testdata/duplicate/sourcepkg"
	sourcepkg21 "github.com/origadmin/adptool/testdata/duplicate/sourcepkg2"
	sourcepkg3 "github.com/origadmin/adptool/testdata/duplicate/sourcepkg3"
	sourcePkg4 "github.com/origadmin/adptool/testdata/source-pkg4"
	sourcepkg "github.com/origadmin/adptool/testdata/sourcepkg"
	sourcepkg2 "github.com/origadmin/adptool/testdata/sourcepkg2"
	custompkg "github.com/origadmin/adptool/testdata/sourcepkg3"
)

const (
	DefaultTimeout   = sourcepkg2.DefaultTimeout
	DefaultTimeout1  = custompkg.DefaultTimeout
	ExportedConstant = sourcepkg.ExportedConstant
	MaxRetries       = sourcepkg.MaxRetries
	MaxRetries1      = sourcepkg2.MaxRetries
	MaxRetries2      = custompkg.MaxRetries
	PriorityHigh     = custompkg.PriorityHigh
	PriorityLow      = custompkg.PriorityLow
	PriorityMedium   = custompkg.PriorityMedium
	StatusFailed     = custompkg.StatusFailed
	StatusPending    = custompkg.StatusPending
	StatusRunning    = custompkg.StatusRunning
	StatusSuccess    = custompkg.StatusSuccess
	StatusUnknown    = custompkg.StatusUnknown
	Version          = sourcepkg2.Version
	Version1         = custompkg.Version
)

var (
	ConfigValue      = sourcepkg.ConfigValue
	ConfigValue1     = sourcepkg2.ConfigValue
	ConfigValue2     = custompkg.ConfigValue
	DefaultWorker    = sourcepkg2.DefaultWorker
	DefaultWorker1   = custompkg.DefaultWorker
	ExportedVariable = sourcepkg.ExportedVariable
	Processors       = custompkg.Processors
	StatsCounter     = sourcepkg2.StatsCounter
	StatsCounter1    = custompkg.StatsCounter
)

type (
	CommonService1                                = sourcepkg3.CommonService
	CommonStruct1                                 = sourcepkg.CommonStruct
	CommonStruct2                                 = sourcepkg2.CommonStruct
	CommonStruct3                                 = custompkg.CommonStruct
	ComplexGenericInterface1[T any, K comparable] = custompkg.ComplexGenericInterface[T, K]
	ComplexInterface1                             = sourcepkg2.ComplexInterface
	Data1                                         = sourcePkg4.Data
	EmbeddedInterface1                            = custompkg.EmbeddedInterface
	ExportedInterface1                            = sourcepkg.ExportedInterface
	ExportedType1                                 = sourcepkg.ExportedType
	GenericHandler1[T any]                        = sourcePkg4.GenericHandler[T]
	GenericWorker1[T any]                         = custompkg.GenericWorker[T]
	Handler1                                      = sourcePkg4.Handler
	HandlerFunc1[T any]                           = custompkg.HandlerFunc[T]
	InputData1                                    = sourcepkg2.InputData
	InputData2[T any]                             = custompkg.InputData[T]
	IntAlias1                                     = custompkg.IntAlias
	Model1                                        = sourcePkg4.Model
	MyStruct1                                     = sourcepkg.MyStruct
	OutputData1                                   = sourcepkg2.OutputData
	OutputData2                                   = custompkg.OutputData
	Priority1                                     = custompkg.Priority
	ProcessConfig1                                = custompkg.ProcessConfig
	ProcessFunc1                                  = custompkg.ProcessFunc
	ProcessOption1                                = custompkg.ProcessOption
	Product1                                      = pkg1.Product
	Product2                                      = pkg3.Product
	Product3                                      = sourcepkg1.Product
	Product4                                      = sourcepkg3.Product
	ProductService1                               = pkg1.ProductService
	ProductService2                               = pkg3.ProductService
	ProductService3                               = sourcepkg1.ProductService
	Service1                                      = sourcePkg4.Service
	Status1                                       = custompkg.Status
	StatusAlias1                                  = custompkg.StatusAlias
	TimeAlias1                                    = custompkg.TimeAlias
	User1                                         = pkg1.User
	User2                                         = pkg2.User
	User3                                         = sourcepkg1.User
	User4                                         = sourcepkg21.User
	User5                                         = sourcepkg3.User
	UserService1                                  = pkg1.UserService
	UserService2                                  = pkg2.UserService
	UserService3                                  = sourcepkg1.UserService
	UserService4                                  = sourcepkg21.UserService
	Worker1                                       = sourcepkg2.Worker
	Worker2                                       = custompkg.Worker
	WorkerConfig1                                 = custompkg.WorkerConfig
	WorkerOption1                                 = custompkg.WorkerOption
)

func CommonFunction() string {
	return sourcepkg.CommonFunction()
}

func CommonFunction1() string {
	return sourcepkg2.CommonFunction()
}

func CommonFunction2() string {
	return custompkg.CommonFunction()
}

func ExportedFunction() {
	sourcepkg.ExportedFunction()
}

func Filter[T any](ts []T, fn func(T) bool) []T {
	return custompkg.Filter[T](ts, fn)
}

func Map[T, U any](ts []T, fn func(T) U) []U {
	return custompkg.Map[T, U](ts, fn)
}

func NewGenericWorker[T any](name string, data T, processor func(T) error) *custompkg.GenericWorker[T] {
	return custompkg.NewGenericWorker[T](name, data, processor)
}

func NewWorker(name string) *sourcepkg2.Worker {
	return sourcepkg2.NewWorker(name)
}

func NewWorker1(name string, options ...custompkg.WorkerOption) *custompkg.Worker {
	return custompkg.NewWorker(name, options...)
}
