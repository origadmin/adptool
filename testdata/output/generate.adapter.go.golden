// Code generated by adptool. DO NOT EDIT.
//
// This file is generated from generate.go.

// Package aliaspkg contains generated code by adptool.
package aliaspkg

import (
	"context"
	"io"
	"log"
	slog "log/slog"
	"time"

	pkg1 "github.com/origadmin/adptool/testdata/duplicate/pkg1"
	pkg2 "github.com/origadmin/adptool/testdata/duplicate/pkg2"
	pkg3 "github.com/origadmin/adptool/testdata/duplicate/pkg3"
	sourcepkg1 "github.com/origadmin/adptool/testdata/duplicate/sourcepkg"
	sourcepkg21 "github.com/origadmin/adptool/testdata/duplicate/sourcepkg2"
	sourcepkg3 "github.com/origadmin/adptool/testdata/duplicate/sourcepkg3"
	sourcePkg4 "github.com/origadmin/adptool/testdata/source-pkg4"
	sourcepkg "github.com/origadmin/adptool/testdata/sourcepkg"
	sourcepkg2 "github.com/origadmin/adptool/testdata/sourcepkg2"
	custompkg "github.com/origadmin/adptool/testdata/sourcepkg3"
)

const (
	ExportedConstant = sourcepkg.ExportedConstant
	MaxRetries       = sourcepkg.MaxRetries
	DefaultTimeout   = sourcepkg2.DefaultTimeout
	MaxRetries1      = sourcepkg2.MaxRetries
	Version          = sourcepkg2.Version
	DefaultTimeout1  = custompkg.DefaultTimeout
	MaxRetries2      = custompkg.MaxRetries
	PriorityHigh     = custompkg.PriorityHigh
	PriorityLow      = custompkg.PriorityLow
	PriorityMedium   = custompkg.PriorityMedium
	StatusFailed     = custompkg.StatusFailed
	StatusPending    = custompkg.StatusPending
	StatusRunning    = custompkg.StatusRunning
	StatusSuccess    = custompkg.StatusSuccess
	StatusUnknown    = custompkg.StatusUnknown
	Version1         = custompkg.Version
	KindAny          = slog.KindAny
	KindBool         = slog.KindBool
	KindDuration     = slog.KindDuration
	KindFloat64      = slog.KindFloat64
	KindGroup        = slog.KindGroup
	KindInt64        = slog.KindInt64
	KindLogValuer    = slog.KindLogValuer
	KindString       = slog.KindString
	KindTime         = slog.KindTime
	KindUint64       = slog.KindUint64
	LevelDebug       = slog.LevelDebug
	LevelError       = slog.LevelError
	LevelInfo        = slog.LevelInfo
	LevelKey         = slog.LevelKey
	LevelWarn        = slog.LevelWarn
	MessageKey       = slog.MessageKey
	SourceKey        = slog.SourceKey
	TimeKey          = slog.TimeKey
)

var (
	ConfigValue      = sourcepkg.ConfigValue
	ExportedVariable = sourcepkg.ExportedVariable
	ConfigValue1     = sourcepkg2.ConfigValue
	DefaultWorker    = sourcepkg2.DefaultWorker
	StatsCounter     = sourcepkg2.StatsCounter
	ConfigValue2     = custompkg.ConfigValue
	DefaultWorker1   = custompkg.DefaultWorker
	Processors       = custompkg.Processors
	StatsCounter1    = custompkg.StatsCounter
	DiscardHandler   = slog.DiscardHandler
)

type (
	Product                                      = pkg1.Product
	ProductService                               = pkg1.ProductService
	User                                         = pkg1.User
	UserService                                  = pkg1.UserService
	User1                                        = pkg2.User
	UserService1                                 = pkg2.UserService
	Product1                                     = pkg3.Product
	ProductService1                              = pkg3.ProductService
	Product2                                     = sourcepkg1.Product
	ProductService2                              = sourcepkg1.ProductService
	User2                                        = sourcepkg1.User
	UserService2                                 = sourcepkg1.UserService
	User3                                        = sourcepkg21.User
	UserService3                                 = sourcepkg21.UserService
	CommonService                                = sourcepkg3.CommonService
	Product3                                     = sourcepkg3.Product
	User4                                        = sourcepkg3.User
	Data                                         = sourcePkg4.Data
	GenericHandler[T any]                        = sourcePkg4.GenericHandler[T]
	Handler                                      = sourcePkg4.Handler
	Model                                        = sourcePkg4.Model
	Service                                      = sourcePkg4.Service
	CommonStruct                                 = sourcepkg.CommonStruct
	ExportedInterface                            = sourcepkg.ExportedInterface
	ExportedType                                 = sourcepkg.ExportedType
	MyStruct                                     = sourcepkg.MyStruct
	CommonStruct1                                = sourcepkg2.CommonStruct
	ComplexInterface                             = sourcepkg2.ComplexInterface
	InputData                                    = sourcepkg2.InputData
	OutputData                                   = sourcepkg2.OutputData
	Worker                                       = sourcepkg2.Worker
	CommonStruct2                                = custompkg.CommonStruct
	ComplexGenericInterface[T any, K comparable] = custompkg.ComplexGenericInterface[T, K]
	EmbeddedInterface                            = custompkg.EmbeddedInterface
	GenericWorker[T any]                         = custompkg.GenericWorker[T]
	HandlerFunc[T any]                           = custompkg.HandlerFunc[T]
	InputData1[T any]                            = custompkg.InputData[T]
	IntAlias                                     = custompkg.IntAlias
	OutputData1                                  = custompkg.OutputData
	Priority                                     = custompkg.Priority
	ProcessConfig                                = custompkg.ProcessConfig
	ProcessFunc                                  = custompkg.ProcessFunc
	ProcessOption                                = custompkg.ProcessOption
	Status                                       = custompkg.Status
	StatusAlias                                  = custompkg.StatusAlias
	TimeAlias                                    = custompkg.TimeAlias
	Worker1                                      = custompkg.Worker
	WorkerConfig                                 = custompkg.WorkerConfig
	WorkerOption                                 = custompkg.WorkerOption
	Attr                                         = slog.Attr
	Handler1                                     = slog.Handler
	HandlerOptions                               = slog.HandlerOptions
	JSONHandler                                  = slog.JSONHandler
	Kind                                         = slog.Kind
	Level                                        = slog.Level
	LevelVar                                     = slog.LevelVar
	Leveler                                      = slog.Leveler
	LogValuer                                    = slog.LogValuer
	Logger                                       = slog.Logger
	Record                                       = slog.Record
	Source                                       = slog.Source
	TextHandler                                  = slog.TextHandler
	Value                                        = slog.Value
)

func CommonFunction() string {
	return sourcepkg.CommonFunction()
}

func ExportedFunction() {
	sourcepkg.ExportedFunction()
}

func CommonFunction1() string {
	return sourcepkg2.CommonFunction()
}

func Execute(ctx context.Context, api sourcepkg2.ComplexInterface, input *sourcepkg2.InputData) (*sourcepkg2.OutputData, error) {
	return sourcepkg2.Execute(ctx, api, input)
}

func NewWorker(name string) *sourcepkg2.Worker {
	return sourcepkg2.NewWorker(name)
}

func CommonFunction2() string {
	return custompkg.CommonFunction()
}

func Execute1(ctx context.Context, api custompkg.ComplexGenericInterface[string, int], input *custompkg.InputData[string], timeout time.Duration) (*custompkg.OutputData, error) {
	return custompkg.Execute(ctx, api, input, timeout)
}

func ExecuteParallel(ctx context.Context, apis []custompkg.ComplexGenericInterface[string, int], input *custompkg.InputData[string]) ([]*custompkg.OutputData, error) {
	return custompkg.ExecuteParallel(ctx, apis, input)
}

func Filter[T any](ts []T, fn func(T) bool) []T {
	return custompkg.Filter[T](ts, fn)
}

func Map[T, U any](ts []T, fn func(T) U) []U {
	return custompkg.Map[T, U](ts, fn)
}

func NewGenericWorker[T any](name string, data T, processor func(T) error) *custompkg.GenericWorker[T] {
	return custompkg.NewGenericWorker[T](name, data, processor)
}

func NewWorker1(name string, options ...custompkg.WorkerOption) *custompkg.Worker {
	return custompkg.NewWorker(name, options...)
}

func Any(key string, value any) slog.Attr {
	return slog.Any(key, value)
}

func AnyValue(v any) slog.Value {
	return slog.AnyValue(v)
}

func Bool(key string, v bool) slog.Attr {
	return slog.Bool(key, v)
}

func BoolValue(v bool) slog.Value {
	return slog.BoolValue(v)
}

func Debug(msg string, args ...any) {
	slog.Debug(msg, args...)
}

func DebugContext(ctx context.Context, msg string, args ...any) {
	slog.DebugContext(ctx, msg, args...)
}

func Default() *slog.Logger {
	return slog.Default()
}

func Duration(key string, v time.Duration) slog.Attr {
	return slog.Duration(key, v)
}

func DurationValue(v time.Duration) slog.Value {
	return slog.DurationValue(v)
}

func Error(msg string, args ...any) {
	slog.Error(msg, args...)
}

func ErrorContext(ctx context.Context, msg string, args ...any) {
	slog.ErrorContext(ctx, msg, args...)
}

func Float64(key string, v float64) slog.Attr {
	return slog.Float64(key, v)
}

func Float64Value(v float64) slog.Value {
	return slog.Float64Value(v)
}

func Group(key string, args ...any) slog.Attr {
	return slog.Group(key, args...)
}

func GroupValue(as ...slog.Attr) slog.Value {
	return slog.GroupValue(as...)
}

func Info(msg string, args ...any) {
	slog.Info(msg, args...)
}

func InfoContext(ctx context.Context, msg string, args ...any) {
	slog.InfoContext(ctx, msg, args...)
}

func Int(key string, value int) slog.Attr {
	return slog.Int(key, value)
}

func Int64(key string, value int64) slog.Attr {
	return slog.Int64(key, value)
}

func Int64Value(v int64) slog.Value {
	return slog.Int64Value(v)
}

func IntValue(v int) slog.Value {
	return slog.IntValue(v)
}

func Log(ctx context.Context, level slog.Level, msg string, args ...any) {
	slog.Log(ctx, level, msg, args...)
}

func LogAttrs(ctx context.Context, level slog.Level, msg string, attrs ...slog.Attr) {
	slog.LogAttrs(ctx, level, msg, attrs...)
}

func New(h slog.Handler) *slog.Logger {
	return slog.New(h)
}

func NewJSONHandler(w io.Writer, opts *slog.HandlerOptions) *slog.JSONHandler {
	return slog.NewJSONHandler(w, opts)
}

func NewLogLogger(h slog.Handler, level slog.Level) *log.Logger {
	return slog.NewLogLogger(h, level)
}

func NewRecord(t time.Time, level slog.Level, msg string, pc uintptr) slog.Record {
	return slog.NewRecord(t, level, msg, pc)
}

func NewTextHandler(w io.Writer, opts *slog.HandlerOptions) *slog.TextHandler {
	return slog.NewTextHandler(w, opts)
}

func SetDefault(l *slog.Logger) {
	slog.SetDefault(l)
}

func SetLogLoggerLevel(level slog.Level) (oldLevel slog.Level) {
	return slog.SetLogLoggerLevel(level)
}

func String(key, value string) slog.Attr {
	return slog.String(key, value)
}

func StringValue(value string) slog.Value {
	return slog.StringValue(value)
}

func Time(key string, v time.Time) slog.Attr {
	return slog.Time(key, v)
}

func TimeValue(v time.Time) slog.Value {
	return slog.TimeValue(v)
}

func Uint64(key string, v uint64) slog.Attr {
	return slog.Uint64(key, v)
}

func Uint64Value(v uint64) slog.Value {
	return slog.Uint64Value(v)
}

func Warn(msg string, args ...any) {
	slog.Warn(msg, args...)
}

func WarnContext(ctx context.Context, msg string, args ...any) {
	slog.WarnContext(ctx, msg, args...)
}

func With(args ...any) *slog.Logger {
	return slog.With(args...)
}
